- name: For each host, scan for its ssh public key
  delegate_to: localhost
  with_items: '{{ inventory_hostname }}'
  shell: "ssh-keyscan {{ item }},{{ lookup ('dig', item) }}"
  ignore_errors: yes
  register: keyscan


- debug:
    msg: '{{ lookup("env", "HOME") }}/.ssh/known_hosts'

- debug:
    msg: '{{ inventory_hostname }}'

- shell: cat '{{ lookup("env", "HOME") }}/.ssh/known_hosts'
  delegate_to: localhost
  become: yes
  register: cat

- debug:
    msg: '{{ cat.stdout_lines }}'

# TODO: If host unreachable, it could just be offline, check if key (IP only) is present in known-hosts and continue if so...
- name: If host unreachable, check if at least A SINGLE key for the IP?
  delegate_to: localhost
  become: yes
  with_items: '{{ inventory_hostname }}'
  lineinfile:
    path: '{{ lookup("env", "HOME") }}/.ssh/known_hosts'
    search_string: '{{ item }},{{ lookup ("dig", item) }}'
    line: write_disabled
  check_mode: yes
  register: search
  failed_when: (search is changed) or (search is failed)


# - name:
#   delegate_to: localhost
#   when: result.rc == '0'
#   loop: '{{ keyscan.results }}'
#   loop_control:
#     loop_var: result
  

- name: Remove the public host key in the '{{ ssh_known_hosts_file }}'
  delegate_to: localhost
  when: result.rc == '0'
  loop: '{{ keyscan.results }}'
  loop_control:
    loop_var: result
  known_hosts:
    name: "{{ result.item }}"
    state: "absent"
    path: "{{ ssh_known_hosts_file }}"


- name: Add/update the public host key in the '{{ ssh_known_hosts_file }}'
  delegate_to: localhost
  when: result.rc == '0'
  loop: '{{ keyscan.results }}'
  loop_control:
    loop_var: result
  known_hosts:
    name: "{{ result.item }}"
    key: "{{ result.stdout }}"
    state: "present"
    path: "{{ ssh_known_hosts_file }}"
  

  
